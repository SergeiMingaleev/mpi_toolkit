#------------------------------------------------------------------
# Пример 5.1: Параллельное решение системы линейных уравнений
#             методом сопряжённых градиентов.
# Реализация №3: Пытаемся распараллелить все вычисления, используя
#                более эффективный с точки зрения межпроцессорных
#                коммуникаций блочный алгоритм умножения матрицы
#                на вектор и нахождения скалярного произведения
#                векторов.
#
# Задача: найти вектор x, являющийся решением системы линейных
#         уравнений A*x = b, максимально эффективно параллелизуя
#         работу между процессами с использованием MPI интерфейса.
#
# Решение системы линейных уравнений A*x = b методом сопряжённых
# градиентов требует выполнения N итераций, где N - это размер
# вектора x. На каждой итерации мы будем обновлять значение
# вектора x в виде последовательности приближённых решений x_{s}
# на итерациях s от 1 до N+1.
#
# Чтобы начать итерации, нам нужно взять какое-то начальное
# приближение для x_{1} на первой итерации - но в целом, оно может
# быть любым, и обычно начинают с нулевого значения.
#
# Нам также понадобятся три вспомогательных вектора r, p, и q,
# значения которых также будут обновляться на каждой итерации s
# в виде последовательностей r_{s}, p_{s}, и q_{s}.
# Считаем при этом, что вектор p инициализирован нулём до начала
# итераций (то есть, для s=0).
#
# Тогда решение системы линейных уравнений может быть найдено
# методом сопряжённых градиентов по такому алгоритму:
#
#    x_{1} = 0 # или ваше приближение для решения!
#    p_{0} = 0
#    for s in range(1, N+1):
#        if s == 1:
#            r_{s} = dot(A.T, dot(A, x_{s}) - b)
#        else:
#            dot_pq = dot(p_{s-1}, q_{s-1})
#            r_{s} = r_{s-1} - q_{s-1} / dot_pq
#        dot_rr = dot(r_{s}, r_{s})
#        p_{s} = p_{s-1} + r_{s} / dot_rr
#        q_{s} = dot(A.T, dot(A, p_{s}))
#        dot_pq = dot(p_{s}, q_{s})
#        x_{s+1} = x_{s} - p_{s} / dot_pq
#
# После выполнения этого алгоритма, мы получим приближённое
# решение x_{N+1}, которое для случая квадратной матрицы A будет
# в действительности точным решением (с точностью до ошибок
# численного округления при выполнении арифметических операций).
#
# При параллелизации этого алгоритма мы будем считать, что общее
# число MPI процессов равно P.
# При этом процесс 0 будет занят одновременно и синхронизацией
# данных между процессами, и реальной работой - то есть, все P
# процессов будут "рабочими".
#
# Размер матрицы A равен (M, N) - M строк и N колонок.
# Мы распределим эту матрицу между всеми "рабочими" процессами
# по блокам в форме массива A_part.
# Эта же матрица, но транспонированная (и при этом точно так же
# распределённая между процессами в форме тех же частей A_part),
# будет умножаться на части векторов размером N_part.
# Скалярное произведение векторов будет выполняться также
# параллельно.
#
# Реализация самого метода сопряжённых градиентов вынесена в функцию
# `conjugate_gradient_method()` - остальная же часть кода занимается
# подготовкой и пересылкой данных между MPI процессами.
#
#------------------------------------------------------------------
# Этот пример (в его оригинальном виде) детально обсуждается
# в лекции Д.В. Лукьяненко "5. Операции с группами процессов
# и коммуникаторами":
# https://youtu.be/nlbWLTGH5rE?list=PLcsjsqLLSfNCxGJjuYNZRzeDIFQDQ9WvC
#
#------------------------------------------------------------------

from mpi4py import MPI
import numpy as np


#------------------------------------------------------------------
def auxiliary_arrays_determination(M, P):
    """
    Расчёт списков числа элементов `rcounts` и соответствующих
    смещений "displs", определяющих распределение больших матриц
    и векторов по всем процессам MPI коммуникатора, включая
    и процесс 0.

    :param M: Общее число элементов вдоль нужной оси матрицы.
    :param P: Общее число процессов, работающих над параллелизацией
              вычислений. Предполагаем при этом, что все потоки
              от 0 до P-1 будут "рабочими".
    :return: Рассчитанные списки числа элементов `rcounts` и
             соответствующих смещений "displs", определяющие
             передачу данных каждому процессу.
    """
    # Считая, что M = P * K + L, где K и L - это целые числа,
    # причём 0 <= L <= P-1, мы можем держать на каждом процессе
    # либо по K+1 либо по К строк, для максимальной балансировки памяти
    # и вычислений по всем "рабочим" процессам.
    # Найдём целые числа K и L из описания алгоритма выше:
    K, L = divmod(np.int32(M), P)

    # Введём два новых списка для описания того, как именно
    # матрицы и векторы будут распределяться по всем процессам.
    # Здесь `rcounts` будет содержать число элементов, хранимое
    # каждым процессом (это K+1 для первых L процессов,
    # и K для оставшихся процессов).
    # Другой список `displs` будет содержать индекс смещений
    # - то есть, номер первой строки, начиная с которой будут
    # храниться `rcounts[m]` строк на процессе `m`.
    # При этом мы предполагаем, что все элементы, которые
    # хранятся на каждом процессе, идут подряд.
    rcounts = np.empty(P, dtype=np.int32)
    displs = np.empty(P, dtype=np.int32)

    # Цикл по всем процессам (они все "рабочие"):
    for m in range(0, P):
        if m < L:
            # Процессы от 0 до L-1 содержат по K+1 строк матрицы
            # (если L=0, то таких процессов не будет!):
            rcounts[m] = K + 1
        else:
            # Оставшиеся процессы от L до P-1 содержат по K строк:
            rcounts[m] = K
        # Индекс смещений равен 0 для процесса 0 и сдвигается
        # для каждого следующего процесса на число строк,
        # хранимых в предыдущем процессе:
        if m == 0:
            displs[m] = 0
        else:
            displs[m] = displs[m - 1] + rcounts[m - 1]
    return rcounts, displs


#------------------------------------------------------------------
def conjugate_gradient_method(A_part, b_part, x_part, N_part, M_part,
                              N, comm_row, comm_col, rank):
    """
    Параллельное решение системы линейных уравнений A*x = b
    методом сопряжённых градиентов.

    Реализация №3: Пытаемся распараллелить все вычисления, используя
                   более эффективный с точки зрения межпроцессорных
                   коммуникаций блочный алгоритм умножения матрицы
                   на вектор и нахождения скалярного произведения
                   векторов.

    Считаем, что на каждом процессе хранится только часть `A_part`
    матрицы `A`, разбитая между процессами по блокам.
    Также хранится только часть `b_part` вектора `b` и часть
    `x_part` вектора `x`.

    Полный вектор решения `x` имеет размер `N`, а его часть `x_part`
    на текущем процессе имеет размер `N_part`. Для правильной сборки
    полного вектора `x` на каждой итерации, нам передаются также
    списки `rcounts_N` и `displs_N`.

    :param A_part: Часть матрицы `A`, хранимая на текущем процессе.
                   Предполагается, что матрица `A` была разбита
                   между процессами по блокам.
    :param b_part: Часть вектора `b`, хранимая на текущем процессе.
    :param x_part: Часть вектора `x`, хранимая на текущем процессе.
    :param N:      Размер полного вектора `x`.
    :param N_part: Размер части `x_part` вектора `x`, хранимой на
                   текущем процессе.

    :return: Часть `x_part` приближённого (или точного, для квадратной матрицы)
             решения. Окончательное решение в виде полного вектора `x` должно
             быть собрано за пределами этой функции.
    """

    # Каждый процесс будет хранить свою часть вспомогательных
    # векторов `r` и `q` в массивах `r_part` и `q_part`:

    r_part = np.empty(N_part, dtype=np.float64)
    q_part = np.empty(N_part, dtype=np.float64)

    # Также каждый процесс будет хранить свою часть вспомогательного
    # вектора `p` в массиве `p_part`.
    # Сразу инициализируем его нулём (на итерации s=0):
    p_part = np.zeros(N_part, dtype=np.float64)

    # Объявим также переменные `dot_vec` (для хранения окончательного
    # значения скалярного произведения векторов) и `dot_vec_temp` (для
    # хранения частичных сумм скалярного произведения векторов,
    # собранных на каждом из процессов для пополнения значения `dot_vec`).
    # Такие переменные достаточно хранить на первых `num_col` процессах,
    # поскольку .......
    if rank in range(num_col):
        dot_vec = np.array(0, dtype=np.float64)
        dot_vec_temp = np.empty(1, dtype=np.float64)
    
    # Цикл по итерациям s от 1 до N включительно:
    for s in range(1, N + 1):
        #------------------------------------------------------------
        # Шаг 1:
        # Обновим или создадим вектор `r`.
        if s == 1:
            # Сначала, на первой итерации s=1, нужно создать вектор `r`:
            #   r_{s} = A.T.dot(A.dot(x_{s}) - b)

            # Для этого ........:
            comm_col.Bcast([x_part, N_part, MPI.DOUBLE], root=0)
            Ax_part_temp = np.dot(A_part, x_part)
            Ax_part = np.empty(M_part, dtype=np.float64)
            comm_row.Reduce([Ax_part_temp, M_part, MPI.DOUBLE], 
                            [Ax_part, M_part, MPI.DOUBLE], 
                            op=MPI.SUM, root=0)
            if rank in range(0, P, num_col):
                b_part = Ax_part - b_part
            comm_row.Bcast([b_part, M_part, MPI.DOUBLE], root=0)    
            r_part_temp = np.dot(A_part.T, b_part)
            comm_col.Reduce([r_part_temp, N_part, MPI.DOUBLE], 
                            [r_part, N_part, MPI.DOUBLE], 
                            op=MPI.SUM, root=0)
        else:
            # На всех последующих итерациях, вектор `r` нужно просто
            # обновить:
            #    dot_pq = dot(p_{s-1}, q_{s-1})
            #    r_{s} = r_{s-1} - q_{s-1} / dot_pq

            if rank in range(num_col):
                dot_vec_temp[0] = np.dot(p_part, q_part)
                comm_row.Allreduce([dot_vec_temp, 1, MPI.DOUBLE],
                                   [dot_vec, 1, MPI.DOUBLE], op=MPI.SUM)
                r_part = r_part - q_part/dot_vec
        
        #------------------------------------------------------------
        # Шаг 2:
        # Посчитаем скалярное произведение векторов dot(r, r):
        #    dot_rr = dot(r_{s}, r_{s})
        # И обновим вектор `p`:
        #    p_{s} = p_{s-1} + r_{s} / dot_rr

        # Первым делом, на каждом процессе получим скалярное
        # произведение кусочков `r_part` с самими собой:
        if rank in range(num_col):
            dot_vec_temp[0] = np.dot(r_part, r_part)
            comm_row.Allreduce([dot_vec_temp, 1, MPI.DOUBLE],
                               [dot_vec, 1, MPI.DOUBLE], op=MPI.SUM)
            p_part = p_part + r_part/dot_vec
        
        comm_col.Bcast([p_part, N_part, MPI.DOUBLE], root=0)

        #------------------------------------------------------------
        # Шаг 3:
        # Обновим вектор `q`:
        #    q_{s} = A.T.dot(A.dot(p_{s}))

        Ap_part_temp = np.dot(A_part, p_part)
        Ap_part = np.empty(M_part, dtype=np.float64)
        comm_row.Allreduce([Ap_part_temp, M_part, MPI.DOUBLE], 
                           [Ap_part, M_part, MPI.DOUBLE], op=MPI.SUM)
        q_part_temp = np.dot(A_part.T, Ap_part)
        comm_col.Reduce([q_part_temp, N_part, MPI.DOUBLE], 
                        [q_part, N_part, MPI.DOUBLE], 
                        op=MPI.SUM, root=0)
        
        #------------------------------------------------------------
        # Шаг 4:
        # Посчитаем скалярное произведение векторов dot(p, q):
        #    dot_pq = dot(p_{s}, q_{s})
        # и обновим вектор `x`:
        #    x_{s+1} = x_{s} - p_{s} / dot_pq

        # Первым делом, на каждом процессе получим скалярное
        # произведение кусочков `p_part` и `q_part`:
        if rank in range(num_col):
            dot_vec_temp[0] = np.dot(p_part, q_part)
            comm_row.Allreduce([dot_vec_temp, 1, MPI.DOUBLE],
                               [dot_vec, 1, MPI.DOUBLE], op=MPI.SUM)
            x_part = x_part - p_part/dot_vec
        # Объединять эти кусочки в полный вектор `x` нет нужды -
        # в полном виде этот вектор был нам нужен только на самой
        # первой итерации, и будет потом нужен только после завершения
        # работы этой функции.

    return x_part


#------------------------------------------------------------------
# Начинаем выполнение программы - первым делом, настроим MPI:
#------------------------------------------------------------------

# Работаем с коммуникатором по всем доступным процессам:
comm = MPI.COMM_WORLD

# Число P доступных процессов в этом коммуникаторе:
P = comm.Get_size()

# Номер текущего процесса (от 0 до P-1):
rank = comm.Get_rank()

#------------------------------------------------------------------
# Шаг 0:
# Реализуемый в этот раз алгоритм будет работать даже на одном
# MPI процессе - процесс 0 в этот раз будет и командовать и работать!
# Однако (см. Шаг 2 ниже), он использует простую квадратную сетку
# разбиения матрицы на процессы, и поэтому требует использования R**2
# процессов, где R - положительное целое число. То есть, допустимое
# число процессов: 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 и т.д.

if np.int32(np.sqrt(P))**2 != P:
    raise ValueError(
        "\nThe number of processes is not a square of some integer "
        "number. Please launch the program with the command:\n"
        ">> mpiexec.exe -n P python.exe Example-05-1.py\n"
        "where `P=R*R` with an integer `R`\n"
        "(say, P=1, 4, 9, 16, 25, 36, 49, 64, 81, 100)"
    )


#------------------------------------------------------------------
# Шаг 1 (точно такой же, как в примерах 1.1 и 2.2):
# Зачитаем из файла размер (M, N) матрицы A.
# Сделаем это только на процессе 0 - считаем,
# что входной файл доступен только на нём:

if rank == 0:
    with open('Example-03_in.dat', 'r') as f1:
        M = np.array(np.int32(f1.readline()))
        N = np.array(np.int32(f1.readline()))
else:
    # На "рабочих" процессах значение `M` не
    # используется - ставим пустую "заглушку":
    M = None
    # и подготавливаем на них "хранилище" для `N`:
    N = np.array(0, dtype=np.int32)

# Раздадим значение `N`, зачитанное процессом 0,
# всем остальным процессам (включая и сам процесс 0):
comm.Bcast(N, root=0)
# Альтернативно, более общая форма записи:
# comm.Bcast([N, 1, MPI.INT], root=0)

# NOTE: Значение `M` не используется на "рабочих" процессах,
#       так что мы его не будем раздавать - лишняя трата времени.

#------------------------------------------------------------------
# Шаг 2:
# Считаем для простоты разбиения матрицы на блоки, что наше число
# процессов P=R*R является квадратом некоторого целого числа R:
R = np.int32(np.sqrt(P))

# Тогда будет естественно разбить матрицу на R*R блоков, так что
# число `num_col` колонок блоков и число `num_row` строк блоков
# будет одинаковым и равным `R`:
num_col = num_row = R

# Разберёмся для нашей матрицы `A` с размером MxN, как именно M
# строк матрицы должны разбиться на `num_row` блоков по вертикали -
# посчитаем для этого списки числа строк `rcounts_M` и их смещений
# `displs_M`.
# Точно так же разберёмся, как именно N колонок матрицы должны
# разбиться на `num_col` блоков по горизонтали - посчитаем для
# этого списки числа колонок `rcounts_N` и их смещений `displs_N`.

if rank == 0:
    # Сделаем такой анализ только на процессе 0.
    # Всю логику расчёта этих списков мы перенесём в отдельную
    # функцию `auxiliary_arrays_determination()`, определённую
    # выше в этом файле:
    rcounts_M, displs_M = auxiliary_arrays_determination(M, num_row)
    rcounts_N, displs_N = auxiliary_arrays_determination(N, num_col)
else:
    # На "рабочих" процессах все эти списки используются только
    # в качестве пустых заглушек (в нескольких `Scatter` ниже):
    rcounts_M = None; displs_M = None
    rcounts_N = None; displs_N = None

# Подготовим "хранилища" для `M_part` и `N_part` на всех процессах:
M_part = np.array(0, dtype=np.int32)
N_part = np.array(0, dtype=np.int32)

# ВАЖНЫЙ МОМЕНТ:
# Для каждого процесса создадим два новых коммуникатора,
# которые позволят общаться процессу со своими соседями
# в пределах одной и той же строки или одного и того же
# столбца:
#          0  1  2       (0,0) (0,1) (0,2)
#          3  4  5  ==>  (1,0) (1,1) (1,2)
#          6  7  8       (2,0) (2,1) (2,2)

# Один коммуникатор, `comm_col`, будет использоваться для
# общения данного процесса со всеми процессами, которые
# образуют одну и ту же колонку блочной матрицы.
# Всего будет `num_row` процессов, связанных между собой
# таким образом - при этом всего будет создано `num_col`
# таких коммуникаторов:

color_col = rank % num_col
comm_col = comm.Split(color_col, rank)

# Например, для случая 9 процессов, мы получим три возможных значения
# для `color_col` (каждое такое значение создаёт новый коммуникатор):
#   0 для процессов 0, 3, 6 - они образуют первую колонку блочной матрицы
#   1 для процессов 1, 4, 7 - они образуют вторую колонку блочной матрицы
#   2 для процессов 2, 5, 8 - они образуют третью колонку блочной матрицы

# Второй коммуникатор, `comm_col`, будет использоваться для
# общения данного процесса со всеми процессами, которые
# образуют одну и ту же строку блочной матрицы.
# Всего будет `num_col` процессов, связанных между собой
# таким образом - при этом всего будет создано `num_row`
# таких коммуникаторов:

color_row = rank // num_col
comm_row = comm.Split(color_row, rank)

# Например, для случая 9 процессов, мы получим три возможных значения
# для `color_row`:
#   0 для процессов 0, 1, 2 - они образуют первую строку блочной матрицы
#   1 для процессов 3, 4, 5 - они образуют вторую строку блочной матрицы
#   2 для процессов 6, 7, 8 - они образуют третью строку блочной матрицы

# Проверим созданные коммуникаторы:
# print(f"comm = {comm}")
# print(f"comm.Get_size() = {comm.Get_size()}")
# print(f"comm.Get_rank() = {comm.Get_rank()}")
# print(f"comm_col = {comm_col}")
# print(f"comm_col.Get_size() = {comm_col.Get_size()}")
# print(f"comm_col.Get_rank() = {comm_col.Get_rank()}")
# print(f"comm_row = {comm_row}")
# print(f"comm_row.Get_size() = {comm_row.Get_size()}")
# print(f"comm_row.Get_rank() = {comm_row.Get_rank()}")

# Разбросаем теперь список числа колонок `rcounts_N`
# элементов в блоках матрицы в виде значений `N_part`
# по всем процессам, которые образуют первую строку
# блочной матрицы (это первые `num_col` процессов
# в терминах всеобщего коммуникатора):
if rank in range(num_col):
    comm_row.Scatter([rcounts_N, 1, MPI.INT], 
                     [N_part, 1, MPI.INT], root=0)

# И размножим полученное `N_part` (разное для разных колонок,
# но одинаковое в пределах одной и той же колонки) на все
# процессы в пределах одной и той же колонки:
comm_col.Bcast([N_part, 1, MPI.INT], root=0)

# Аналогично, разбросаем теперь список числа строк
# `rcounts_M` элементов в блоках матрицы в виде значений
# `M_part` по всем процессам, которые образуют первый
# столбец блочной матрицы:
if rank in range(0, P, num_col):
    comm_col.Scatter([rcounts_M, 1, MPI.INT],
                     [M_part, 1, MPI.INT], root=0)

# И размножим полученное `M_part` (разное для разных строк,
# но одинаковое в пределах одной и той же строки) на все
# процессы в пределах одной и той же строки:
comm_row.Bcast([M_part, 1, MPI.INT], root=0)

#------------------------------------------------------------------
# Шаг 3:
# Зачитаем из файла матрицу `A`. Как и в примере 2.2, мы будем
# экономить память - будем зачитывать матрицу по кусочкам,
# сразу отдавая каждый кусочек нужному процессу.

# Подготовим "хранилище" для кусочков `A_part` на всех процессах -
# каждое со своим числом строк `M_part` и столбцов `N_part`:
A_part = np.empty((M_part, N_part), dtype=np.float64)
# NOTE: В это раз процесс 0 рабочий - так что матрица `A_part`
# здесь также будет занимать память.

group = comm.Get_group()

if rank == 0:
    # Зачитаем на процессе 0 файл с матрицей `A` не сразу весь,
    # а по кусочкам - сразу отдавая каждый кусочек своему
    # "рабочему" процессу (включая в этот раз и сам процесс 0!):
    with open('Example-03_AData.dat', 'r') as f2:
        for m in range(num_row):
            a_temp = np.empty(rcounts_M[m]*N, dtype=np.float64)
            for j in range(rcounts_M[m]):
                for n in range(num_col):
                    for i in range(rcounts_N[n]):
                        a_temp[rcounts_M[m]*displs_N[n] + j*rcounts_N[n] + i] = np.float64(f2.readline())
            if m == 0:
                comm_row.Scatterv([a_temp, rcounts_M[m]*rcounts_N, rcounts_M[m]*displs_N, MPI.DOUBLE],
                                  [A_part, M_part*N_part, MPI.DOUBLE], root=0)
            else:
                group_temp = group.Range_incl([(0,0,1), (m*num_col,(m+1)*num_col-1,1)])
                comm_temp = comm.Create(group_temp)
                rcounts_N_temp = np.hstack((np.array(0, dtype=np.int32), rcounts_N))
                displs_N_temp = np.hstack((np.array(0, dtype=np.int32), displs_N))
                comm_temp.Scatterv([a_temp, rcounts_M[m]*rcounts_N_temp, rcounts_M[m]*displs_N_temp, MPI.DOUBLE],
                                   [np.empty(0, dtype=np.float64), 0, MPI.DOUBLE], root=0)
                group_temp.Free(); comm_temp.Free()
else:
    # Каждый "рабочий" процесс получает свою часть матрица и записывает
    # её в свой массив `A_part`:
    if rank in range(num_col):
        comm_row.Scatterv([None, None, None, None], 
                          [A_part, M_part*N_part, MPI.DOUBLE], root=0)
    for m in range(1, num_row):
        group_temp = group.Range_incl([(0,0,1), (m*num_col,(m+1)*num_col-1,1)])
        comm_temp = comm.Create(group_temp)
        if rank in range(m*num_col, (m+1)*num_col):
            comm_temp.Scatterv([None, None, None, None], 
                               [A_part, M_part*N_part, MPI.DOUBLE], root=0)
            comm_temp.Free()
        group_temp.Free()

#------------------------------------------------------------------
# Шаг 4:
# Зачитаем из файла вектор `b`. Зачитаем его полностью на процессе 0
# (считаем, что входной файл доступен только на нём) - и потом
# раздадим его по кусочкам `b_part` всем "рабочим" процессам.

if rank == 0:
    # Зачитаем файл `b` на процессе 0:
    b = np.empty(M, dtype=np.float64)
    with open('Example-03_bData.dat', 'r') as f3:
        for j in range(M):
            b[j] = np.float64(f3.readline())
else:
    # На "рабочих" процессах вектор `b` используется
    # (в `comm_col.Scatterv` ниже) в качестве пустой заглушки:
    b = None

# Подготовим "хранилище" для `b_part` на всех процессах:
b_part = np.empty(M_part, dtype=np.float64)

# И разбросаем зачитанный выше вектор `b` по всем процессам m
# в виде кусочков `b_part` с размерами `M_part = rcounts_M[m]`,
# используя смещения `displs_M[m]`:
if rank in range(0, P, num_col):
    comm_col.Scatterv([b, rcounts_M, displs_M, MPI.DOUBLE], 
                      [b_part, M_part, MPI.DOUBLE], root=0)

#------------------------------------------------------------------
# Шаг 5:
# Подготовим "хранилища" для вектора `x`.
# Полная версия вектора `x` будет храниться только на процессе 0:
if rank == 0:
    # ВАЖНО: если вы знаете хорошее начальное приближение для `x`,
    # дайте его здесь!
    x = np.zeros(N, dtype=np.float64)
else:
    # На "рабочих" процессах вектор `x` используется
    # (в `comm_row.Scatterv` ниже) в качестве пустой заглушки:
    x = None

# На рабочих же процессах (включая и сам процесс 0) будут храниться
# только кусочки вектора `x` в виде векторов `x_part`.

# Подготовим "хранилище" для `x_part` на всех процессах:
x_part = np.empty(N_part, dtype=np.float64)

# И разбросаем вектор `x` по всем процессам в виде кусочков
# `x_part` (с размером `N_part`) этого вектора:
if rank in range(num_col):
    comm_row.Scatterv([x, rcounts_N, displs_N, MPI.DOUBLE], 
                    [x_part, N_part, MPI.DOUBLE], root=0)

#------------------------------------------------------------------
# Шаг 6:
# Собственно, и сама нужная нам работа - решение системы линейных
# уравнений итерационным методом сопряжённых градиентов:

# На каждом процессе, алгоритм отработает со своими кусками массивов
# `A`, `b`, и `x` в виде `A_part`, `b_part`, и `x_part`, и возвратит
# свой кусок найденного решения `x_part` (детали описаны внутри самой
# функции):
x_part = conjugate_gradient_method(A_part, b_part, x_part, N_part, M_part,
                                   N, comm_row, comm_col, rank)

# Проверим, кто что посчитал:
print(f"Vector `x_part` on process {rank} consists of {len(x_part)} elements:")
print(f"  x_part = {x_part}")

# Соберём вектор `x` на процессе 0 (root=0) из кусочков `x_part`, присланными
# всеми процессами коммуникатора `comm_row`:
if rank in range(num_col):
    comm_row.Gatherv([x_part, N_part, MPI.DOUBLE], 
                     [x, rcounts_N, displs_N, MPI.DOUBLE], root=0)

#------------------------------------------------------------------
# Шаг 7:
# Окончательно, нарисуем посчитанный вектор `x`, используя
# библиотеку matplotlib. Делаем это только на процессе 0.

if rank == 0:
    # Для контроля, напечатаем найденное решение на консоли:
    print(f"\nFinal solution:\nx = {x}")

    # Подготовим рисунок и данные для него:
    import matplotlib.pyplot as plt
    plt.style.use('dark_background')
    fig = plt.figure()
    ax = plt.axes(xlim=(0, N), ylim=(-1.5, 1.5))
    ax.set_xlabel('i'); ax.set_ylabel('x[i]')
    # индексы элементов вектора `x`:
    ii = np.arange(np.int32(N))

    # Нарисуем полное решение:
    #ax.plot(ii, x, '-y', lw=3)

    # А лучше, нарисуем кусочки, которые были посчитаны
    # на каждом отдельном процессе (поиграйтесь с числом
    # процессов!):
    for m in range(num_col):
        procs = list(range(m, P, num_row))
        r = rcounts_N[m]
        d = displs_N[m]
        ax.plot(ii[d:d+r], x[d:d+r], '-', lw=3,
                label=f"Processes {procs} (size {r})")
    plt.legend()
    plt.show()

#------------------------------------------------------------------
